// ------------° MELDOY °---------------
#define N_B0  31//Creamos una variable con una frecuencia
#define N_C1  33//Creamos una variable con una frecuencia
#define N_CS1 35//Creamos una variable con una frecuencia
#define N_D1  37//Creamos una variable con una frecuencia
#define N_DS1 39//Creamos una variable con una frecuencia
#define N_E1  41//Creamos una variable con una frecuencia
#define N_F1  44//Creamos una variable con una frecuencia
#define N_FS1 46//Creamos una variable con una frecuencia
#define N_G1  49//Creamos una variable con una frecuencia
#define N_GS1 52//Creamos una variable con una frecuencia
#define N_A1  55//Creamos una variable con una frecuencia
#define N_AS1 58//Creamos una variable con una frecuencia
#define N_B1  62//Creamos una variable con una frecuencia
#define N_C2  65//Creamos una variable con una frecuencia
#define N_CS2 69//Creamos una variable con una frecuencia
#define N_D2  73//Creamos una variable con una frecuencia
#define N_DS2 78//Creamos una variable con una frecuencia
#define N_E2  82//Creamos una variable con una frecuencia
#define N_F2  87//Creamos una variable con una frecuencia
#define N_FS2 93//Creamos una variable con una frecuencia
#define N_G2  98//Creamos una variable con una frecuencia
#define N_GS2 104//Creamos una variable con una frecuencia
#define N_A2  110//Creamos una variable con una frecuencia
#define N_AS2 117//Creamos una variable con una frecuencia
#define N_B2  123//Creamos una variable con una frecuencia
#define N_C3  131//Creamos una variable con una frecuencia
#define N_CS3 139//Creamos una variable con una frecuencia
#define N_D3  147//Creamos una variable con una frecuencia
#define N_DS3 156//Creamos una variable con una frecuencia
#define N_E3  165//Creamos una variable con una frecuencia
#define N_F3  175//Creamos una variable con una frecuencia
#define N_FS3 185//Creamos una variable con una frecuencia
#define N_G3  196//Creamos una variable con una frecuencia
#define N_GS3 208//Creamos una variable con una frecuencia
#define N_A3  220//Creamos una variable con una frecuencia
#define N_AS3 233//Creamos una variable con una frecuencia
#define N_B3  247//Creamos una variable con una frecuencia
#define N_C4  262//Creamos una variable con una frecuencia
#define N_CS4 277//Creamos una variable con una frecuencia
#define N_D4  294//Creamos una variable con una frecuencia
#define N_DS4 311//Creamos una variable con una frecuencia
#define N_E4  330//Creamos una variable con una frecuencia
#define N_F4  349//Creamos una variable con una frecuencia
#define N_FS4 370//Creamos una variable con una frecuencia
#define N_G4  392//Creamos una variable con una frecuencia
#define N_GS4 415//Creamos una variable con una frecuencia
#define N_A4  440//Creamos una variable con una frecuencia
#define N_AS4 466//Creamos una variable con una frecuencia
#define N_B4  494//Creamos una variable con una frecuencia
#define N_C5  523//Creamos una variable con una frecuencia
#define N_CS5 554//Creamos una variable con una frecuencia
#define N_D5  587//Creamos una variable con una frecuencia
#define N_DS5 622//Creamos una variable con una frecuencia
#define N_E5  659//Creamos una variable con una frecuencia
#define N_F5  698//Creamos una variable con una frecuencia
#define N_FS5 740//Creamos una variable con una frecuencia
#define N_G5  784//Creamos una variable con una frecuencia
#define N_GS5 831//Creamos una variable con una frecuencia
#define N_A5  880//Creamos una variable con una frecuencia
#define N_AS5 932//Creamos una variable con una frecuencia
#define N_B5  988//Creamos una variable con una frecuencia
#define N_C6  1047//Creamos una variable con una frecuencia
#define N_CS6 1109//Creamos una variable con una frecuencia
#define N_D6  1175//Creamos una variable con una frecuencia
#define N_DS6 1245//Creamos una variable con una frecuencia
#define N_E6  1319//Creamos una variable con una frecuencia
#define N_F6  1397//Creamos una variable con una frecuencia
#define N_FS6 1480//Creamos una variable con una frecuencia
#define N_G6  1568//Creamos una variable con una frecuencia
#define N_GS6 1661//Creamos una variable con una frecuencia
#define N_A6  1760//Creamos una variable con una frecuencia
#define N_AS6 1865//Creamos una variable con una frecuencia
#define N_B6  1976//Creamos una variable con una frecuencia
#define N_C7  2093//Creamos una variable con una frecuencia
#define N_CS7 2217//Creamos una variable con una frecuencia
#define N_D7  2349//Creamos una variable con una frecuencia
#define N_DS7 2489//Creamos una variable con una frecuencia
#define N_E7  2637//Creamos una variable con una frecuencia
#define N_F7  2794//Creamos una variable con una frecuencia
#define N_FS7 2960//Creamos una variable con una frecuencia
#define N_G7  3136//Creamos una variable con una frecuencia
#define N_GS7 3322//Creamos una variable con una frecuencia
#define N_A7  3520//Creamos una variable con una frecuencia
#define N_AS7 3729//Creamos una variable con una frecuencia
#define N_B7  3951//Creamos una variable con una frecuencia
#define N_C8  4186//Creamos una variable con una frecuencia
#define N_CS8 4435//Creamos una variable con una frecuencia
#define N_D8  4699//Creamos una variable con una frecuencia
#define N_DS8 4978 //Creamos una variable con una frecuencia


int const TEMPO = 1200; //Tiempo para reprdocudir 
int melodys[] = {
  N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, 
};
//VARIABLE DONDE CARGAMOS LA SINCRONIA DE LA MELODIA 

int noteDurations[] = {
  16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 16, 16, 16, 16, 16, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 2, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 8, 8, 16, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, 15, 8, 8, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 1
};
// VARIABLE DE VARIACION DE TIEMPO PARA MELODIA

// MODULO RFID ----------------------_____________________________------------------------------------------________________________----------------
#include <SPI.h>      // incluye libreria bus SPI
#include <MFRC522.h>      // incluye libreria especifica para MFRC522

#define RST_PIN  5      // constante para referenciar pin de reset
#define SS_PIN  53      // constante para referenciar pin de slave select

MFRC522 mfrc522(SS_PIN, RST_PIN); // crea objeto mfrc522 enviando pines de slave select y reset
byte LecturaUID[4];         // crea array para almacenar el UID leido
byte Usuario1[4] = {0xD2, 0x80, 0xF7, 0x24} ;   // UID de tarjeta leido en programa 1


// ------------° CONTRASEÑA °---------------
#define ledOK 2 // VARIABLE LED VERDARDEDRO 
#define ledERR 4 // VARIABLE LED INCORRECTO
#define pulsaA 9 // VARIABLE PULSADOR1 CONTRASEÑA
#define pulsaB 10 // VARIABLE PULSADOR2 CONTRASEÑA
#define pulsaC 11 // VARIABLE PULSADOR3 CONTRASEÑA
int pulTX = 30; // VARIABLE PARA ENVIAR SEÑAL 
int pulRX = 31; // VARIABLE QUE RESIVE SEÑAL 
int estadoRX; // VARIABLE CARGAMOS EL ESTADO DE RX
int X = 0; // VARIABLE PARA WHILE DE SENSORES
int L = 0; // VARIABLE PARA WHILE DE LUCES
// ------------° DISPLAY °---------------
#include <Wire.h> // LIBRERIA DE ARDUINO
#include <LiquidCrystal_I2C.h> // LIBRERIA PARA MODULO I2C
LiquidCrystal_I2C lcd(0x27, 16, 2); // UBICACION DE DISPLAY

// ------------° SENSORES °---------------
int ledC = 22; //Cocina
int ledHA = 23; //HabitacionA
int ledHB = 24;// HabitacionB
int ledA = 25; //Luz De Afuera
int sen1 = 3; //Sensor de cocina
int sen2 = 6; //Sensor de HabitacionA
int sen3 = 7; //Sensor de HabitacionB
int cocinaS; //Cargamos el estado del sensor HABITACION B
int habitacionAs; //Cargamos el estado del sensor HABITACION A
int habitacionBs; //Cargamos el estado del sensor COCINA

// ------------° BUZZER °---------------
int Buzzer = 8; // Buzzer pin
int Do = 400; // Variable donde cargamos una frecuencia 
int Sol = 1000; // Variable donde cargamos una frecuencia
int Re = 200; // Variable donde cargamos una frecuencia
int duracion = 200; //Variable cargamos el tiempo de duracion
int duracion2 = 1500; //Variable cargamos el segundo tiempo de duracion
int retardo = 150; //Variable cargamos el tiempo de retardo

// ------------° MELODY °---------------
int melody_len = sizeof(melodys) / sizeof(melodys[0]);//

void setup() {
  // MODULO RFID ----------------------_____________________________------------------------------------------________________________----------------
  Serial.begin(9600);     // inicializa comunicacion por monitor serie a 9600 bps
  SPI.begin();        // inicializa bus SPI
  mfrc522.PCD_Init();     // inicializa modulo lector
  Serial.println("Verificando datos");    // Muestra texto Listo

  // ------------° CONTRASEÑA °---------------
  pinMode(ledOK, OUTPUT); //Asignamos variable como salida
  pinMode(ledERR, OUTPUT); //Asignamos variable como salida
  pinMode(pulsaA, INPUT_PULLUP); //Asignamos variable como entrada pullup
  pinMode(pulsaB, INPUT_PULLUP); //Asignamos variable como entrada pullup
  pinMode(pulsaC, INPUT_PULLUP); //Asignamos variable como entrada pullup
  pinMode(pulTX, OUTPUT); //Asignamos variable como salida
  pinMode(pulRX, INPUT); //Asignamos variable como entrada
  Serial.begin(9600); //Activamos el monitor serial

  // ------------° SENSORES °---------------
  pinMode (sen1, INPUT); //Asignamos variable como entrada
  pinMode (sen2, INPUT); //Asignamos variable como entrada
  pinMode (sen3, INPUT); //Asignamos variable como entrada
  pinMode (ledA, OUTPUT); //Asignamos variable como salida
  pinMode (ledHA, OUTPUT); //Asignamos variable como salida
  pinMode (ledHB, OUTPUT); //Asignamos variable como salida
  pinMode (ledC, OUTPUT); //Asignamos variable como salida

  //DISPLAY
  lcd.init(); //Iniciamos el display
  lcd.backlight(); //Prendemos luz de contraste/trasera en el display
  lcd.clear(); // Limpiamos la pantalla
  //MELODY
}
// ------------° CONTRASEÑA °---------------
int clave[] = {1, 1, 3, 2,}; // Asignamos una clave especifica en la variable
int sec[] = {100, 100, 100, 100}; // Cargamos la cantidad de datos de la contraseña
int estado = 0; // Variable del estado de la contraseña
int intentosRestantes = 3; // Cantidad de intentos realizados

void loop() {
  // ------------° CONTRASEÑA °---------------
  if (digitalRead(pulsaA)) { //Condicion para pulsador A
    sec[estado] = 1; // declaramos el pulsador 'a' como 1 en la contraseña
    estado++; //lo guardamos como un resultado cada vez que se precione el pulsador 'a'
    delay(500);//le dejamos 1/2 segundo para que lo procese 
    Serial.println("a");// imprimimos a en el monitor serial a
    lcd.clear(); //limpiamos el mensaje del lcd
    lcd.print("Contra: -- 1 --");//imprimimos contra:-- 1 -- en el lcd
  }
  if (digitalRead(pulsaB)) {//Condicion para pulsador B
    sec[estado] = 2;// declaramos el pulsador 'b' como 2 en la contraseña
    estado++;//lo guardamos como un resultado cada vez que se precione el pulsador 'b'
    delay(500);//le dejamos 1/2 segundo para que lo procese 
    Serial.println("b");// imprimimos a en el monitor serial b
    lcd.clear();//limpiamos el mensaje del lcd
    lcd.print("Contra: -- 2 --");//imprimimos contra:-- 2 -- en el lcd
  }
  if (digitalRead(pulsaC)) {//Condicion para pulsador C
    sec[estado] = 3;// declaramos el pulsador 'c' como 3 en la contraseña
    estado++;//lo guardamos como un resultado cada vez que se precione el pulsador 'c'
    delay(500);//le dejamos 1/2 segundo para que lo procese 
    Serial.println("c");// imprimimos a en el monitor serial c
    lcd.clear();//limpiamos el mensaje del lcd
    lcd.print("Contra: -- 3 --");//imprimimos contra:-- 3 -- en el lcd
  }
  if (estado == 4) {// permitios que el usuario ingrese cuatro pulsos
    if ((sec[1] == clave[1]) && (sec[2] == clave[2]) && (sec[3] == clave[3]) && (sec[4] == clave[4])) {// leemos cada uno de los pulsos que ingreso el usuario
      digitalWrite(ledOK, HIGH);//si la contraseña es correcta encendemos el ledOK
      intentosRestantes = 3;//resetea los intentos erroneos de las claves incorrectas que cargo el usuario 
      Serial.println("correctou");// imprime correctou en el monitor serial
      lcd.clear();// limpia el lcd
      lcd.print("Correctouu");//imprime correctou en el lcd
      digitalWrite(pulTX, HIGH);//enviamos una señal de HIGH desde el pin 30
    }
    else {//si la clave que ingreso el usuario es incorrecta va restando el valor de intentosrestantes
      intentosRestantes--;//va borrando desde '1' a la variable de intentosrestantes
      digitalWrite(ledERR, HIGH);//enciede el ledERR
      delay(500);//pausa durante 1/2 segundo
      lcd.clear();// limpia el lcd 
      lcd.print("Incorrectouu");//imprime incorrectouu en el lcd 
      delay(1000);// mantiene el lcd encendido durante un segundo
      lcd.clear();//limpia el mensaje del lcd 
      BUZZER();//llama la funcion del buzzer
    }
    digitalWrite(ledOK, LOW);//apaga led corecto
    digitalWrite(ledERR, LOW);//apaga led incorecto
    estado = 0;//modifica el valor de estado a 0
  }
  if (intentosRestantes == 0) {//si el usuario se equivoca tres veces en la clave y el "intentosrestantes--;" queda en 0 se esjecuta el proximo bloque
    while (X <= 10) {//repite el programa 10 veces
      digitalWrite(ledOK, HIGH);//enciende el ledOK
      delay(500);// durante 1/2 segundo
      digitalWrite(ledOK, LOW);//apaga el ledOK 
      digitalWrite(ledERR, HIGH);//enciende ledERR 
      delay(500);//durante 1/2 segundo
      digitalWrite(ledERR, LOW);//apaga el ledERR 
      X++;// suma de a 1 el valor de x
      intentosRestantes = 3;// inicia nuevamente la variable intentosrestantes con 3
    Serial.println("intrusoooooo");//imprime intrusoooooo en el monitor serial
    lcd.clear();// limpia el lcd
    lcd.setCursor(0, 0);// ubica el mensaje del lcd en la posicion 0,0 (arriba en la izquierda)
    lcd.print("INTRUSOOO");//imprime intrusooo en el lcd
    lcd.setCursor(0, 1);// ubica el texto del lcd en la posicion 0,1 (izquierda abajo)
    lcd.print("CORREE PERRAAA");//imprime en el lcd CORREE PERRAAA
    lcd.clear();//LIMPIA EL LCD 
    melody();//llama la funcion melody
    return;// una vez hecho este proceso retorna/reinicia el void loop 
  }
  }
  //--------------------------- °-°-°-°-°-°-°-°-°-°-°-°-°-°-°-°-°-° -------------------------------------
  estadoRX = digitalRead(pulRX);//declaramos que estadoRX es la lectura digital del pin 31(pulRX)
  if (estadoRX != HIGH ) { // SUERTE - SUERTE - SUERTE  mandamos una señal mistica de suerte al codigo para que funcione,si estadoRX es distinto a HIGH 
    return;// reinicia el codigo desde el void loop 
  }
  // ------------° SENSORES °---------------
  cocinaS = digitalRead(sen1);//declaramos cocinaS como lectura digital del sensor 1 (sen1)
  habitacionAs = digitalRead(sen2);//declaramos habitacionAs como lectura digital del sensor 2 (sen2)
  habitacionBs = digitalRead(sen3);//declaramos habitacionBs como lectura digital del sensor 3 (sen3)
  if (cocinaS == HIGH) {//si cosinaS es igual a HIGH se ejecuta el siguiente bloque
    while (L <= 3) {//hacemos que el bucle while se ejecuta 3 veeces 
      digitalWrite(ledC, HIGH);//encender ledc
      digitalWrite(ledHA, HIGH);//encender ledHA
      digitalWrite(ledHB, HIGH);//encender ledHB
      digitalWrite(ledA, HIGH);//encender ledA
      delay(100);// retarda 100 mili segundos 
      digitalWrite(ledC, LOW);// apaga el ledC
      digitalWrite(ledHA, LOW);// apaga el ledHA
      digitalWrite(ledHB, LOW);// apaga el ledHB
      digitalWrite(ledA, LOW);// apaga el ledA
      delay(100);// retarda 100 mili segundos 
      L++;//suma de a uno la variable L
      displaycocina();// llamamos la funcion displaycocina
      BuzztonA();// llamamos la funcion BuzztonA
    }
    L = 0;// iniciamoss la variable L en 0
  }
  if (habitacionAs == HIGH) {//si habitacionAs es igual a HIGH se ejecuta el siguiente bloque
    while (L <= 3) {//hacemos que el bucle while se ejecuta 3 veeces
      digitalWrite(ledC, HIGH);//encender ledc
      digitalWrite(ledHA, HIGH);//encender ledHA
      digitalWrite(ledHB, HIGH);//encender ledHB
      digitalWrite(ledA, HIGH);//encender ledA
      delay(100);// retarda 100 mili segundos 
      digitalWrite(ledC, LOW);// apaga el ledC
      digitalWrite(ledHA, LOW);// apaga el ledHA
      digitalWrite(ledHB, LOW);// apaga el ledHB
      digitalWrite(ledA, LOW);// apaga el ledA
      delay(100);// retarda 100 mili segundos 
      L++;//suma de a uno la variable L
      displayhabitacionA();// llamamos la funcion displayhabitacionA
      BuzztonA();// llamamos la funcion BuzztonA
    }
    L = 0;
  }
  if (habitacionBs == HIGH) {//si habitacionBs es igual a HIGH se ejecuta el siguiente bloque
    while (L <= 3) {//hacemos que el bucle while se ejecuta 3 veeces
      digitalWrite(ledC, HIGH);//encender ledc
      digitalWrite(ledHA, HIGH);//encender ledHA
      digitalWrite(ledHB, HIGH);//encender ledHB
      digitalWrite(ledA, HIGH);//encender ledA
      delay(100);// retarda 100 mili segundos 
      digitalWrite(ledC, LOW);// apaga el ledC
      digitalWrite(ledHA, LOW);// apaga el ledHA
      digitalWrite(ledHB, LOW);// apaga el ledHB
      digitalWrite(ledA, LOW);// apaga el ledA
      delay(100);// retarda 100 mili segundos 
      L++;//suma de a uno la variable L
      displayhabitacionB();// llamamos la funcion displayhabitacionB
      BuzztonA();// llamamos la funcion BuzztonA
    }
    L = 0;
  }
  // MODULO RFID ----------------------_____________________________------------------------------------------________________________----------------
  if ( ! mfrc522.PICC_IsNewCardPresent())// si no hay una tarjeta presente
    return;// retorna al loop esperando por una tarjeta

  if ( ! mfrc522.PICC_ReadCardSerial())// si no puede obtener datos de la tarjeta
    return;// retorna al loop esperando por otra tarjeta

  Serial.print("UID:");// muestra texto UID:
  for (byte i = 0; i < mfrc522.uid.size; i++) {// bucle recorre de a un byte por vez el UID
    if (mfrc522.uid.uidByte[i] < 0x10) {// si el byte leido es menor a 0x10
      Serial.print(" 0");// imprime espacio en blanco y numero cero
    }
    else {// sino
      Serial.print(" ");// imprime un espacio en blanco
    }
    Serial.print(mfrc522.uid.uidByte[i], HEX);// imprime el byte del UID leido en hexadecimal
    LecturaUID[i] = mfrc522.uid.uidByte[i];// almacena en array el byte del UID leido
  }

  Serial.print("\t");// imprime un espacio de tabulacion

  if (comparaUID(LecturaUID, Usuario1)) {// llama a funcion comparaUID con Usuario1
    Serial.println("Bienvenido Usuario 1");//imprimir el texto entre ""
    digitalWrite(pulTX, LOW);//Enviar señal 0
    lcd.setCursor(1, 0);//Selcionamos localizacion del display
    lcd.print("alarmas desctivadas");// Imprime en el display el texto entre ""
    lcd.setCursor(0, 1);//Selcionamos localizacion del display
    lcd.print("sistem off");// Imprime en el display el texto entre ""
    delay(5000);//Tiempo de retardo
    lcd.clear();//Limpia el lcd


  }// si retorna verdadero muestra texto bienvenida
  else {// si retorna falso
    Serial.println("Usuario No Encontrad");// muestra texto equivalente a acceso denegado
    lcd.setCursor(1, 0);//Selcionamos localizacion del display
    lcd.print("usuario denegado");// Imprime en el display el texto entre ""
    lcd.setCursor(0, 1);//Selcionamos localizacion del display
    lcd.print("sistem active");// Imprime en el display el texto entre ""
    delay(5000);//Tiempo de retardo
    lcd.clear();//Limpia el lcd
  }
  mfrc522.PICC_HaltA();// detiene comunicacion con tarjeta
}
// MODULO RFID ----------------------_____________________________------------------------------------------________________________----------------
boolean comparaUID(byte lectura[], byte usuario[])// funcion comparaUID
{
  for (byte i = 0; i < mfrc522.uid.size; i++) {// bucle recorre de a un byte por vez el UID
    if (lectura[i] != usuario[i]) {// si byte de UID leido es distinto a usuario
      return (false);// retorna falso
    }
    return (true);// si los 4 bytes coinciden retorna verdadero
  }
}
// ------------°-°-°-°-°-°-°-°-°-°-°FUNCIONES -°-°-°-°-°-°-°-°-°-°-°-°---------------

// ------------° BUZZER °---------------
void BuzztonA() {// Creamos funcion
  tone(Buzzer, Re, duracion2);//Enviamos un valor al (pin Buzzer) - una (Frecuencia) - con un (tiempo de retardo) 
}

// ------------° DISPLAY °---------------
void displaycocina() {//Creamos funcion
  lcd.clear();//Limpia el lcd
  lcd.setCursor(0, 0);//Selcionamos localizacion del display
  lcd.print("Sensor ACTIVADO!!");//Imprime en el display el texto entre ""
  lcd.setCursor(0, 1);//Selcionamos localizacion del display
  lcd.print("Cocina");//Imprime en el display el texto entre ""
}
void displayhabitacionA() {//Creamos funcion
  lcd.clear();//Limpia el lcd
  lcd.setCursor(0, 0);//Selcionamos localizacion del display
  lcd.print("Sensor ACTIVADO!!");//Imprime en el display el texto entre ""
  lcd.setCursor(0, 1);//Selcionamos localizacion del display
  lcd.print("habitacionA");//Imprime en el display el texto entre ""
}
void displayhabitacionB() {//Creamos funcion
  lcd.clear();//Limpia el lcd
  lcd.setCursor(0, 0);//Selcionamos localizacion del display
  lcd.print("Sensor ACTIVADO!!");//Imprime en el display el texto entre ""
  lcd.setCursor(0, 1);//Selcionamos localizacion del display
  lcd.print("habitacionB");//Imprime en el display el texto entre ""
}
// ------------° MELODY °---------------
void melody() {//Creamos funcion
  for (int thisNote = 0; thisNote < melody_len; thisNote++) {//Creamos un bucle para que realice correctamente la melodia
    int noteDuration = TEMPO / noteDurations[thisNote];//
    tone(8, melodys[thisNote], noteDuration);//Enviamos un valor al (pin Buzzer) - una (Frecuencia) - con un (tiempo de retardo)
    int pauseBetweenNotes = noteDuration * 1.45;// Le damos un valor diferente a la variable
    delay(pauseBetweenNotes);//Tiempo de retardo cargado en la variable
    noTone(8);//Detenemos la señal que es enviada por el pin 8
  }
}

// ------------° BUZZER CONTRASEÑA °---------------
void BUZZER() {//Creamos funcion
  tone(Buzzer, Do, duracion);//Enviamos un valor al (pin Buzzer) - una (Frecuencia) - con un (tiempo de retardo)
  delay (retardo);//Tiempo de retardo cargado en la variable
  tone(Buzzer, Sol, duracion);//Enviamos un valor al (pin Buzzer) - una (Frecuencia) - con un (tiempo de retardo)
  delay(retardo);//Tiempo de retardo cargado en la variable
}
